{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/Untitled.jpg"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","varaint","start","end","value","duration","separator","Date","toDateString","variant","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6ed3ea9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__v5XoX\",\"card\":\"Cards_card__kaRnE\",\"infected\":\"Cards_infected__c7zZX\",\"recovered\":\"Cards_recovered__1eEUD\",\"deaths\":\"Cards_deaths__xw2vu\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate} }) => {\r\n    // console.log(props);\r\n    if (!confirmed) {\r\n        return 'Loading...';\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container} >\r\n            <Grid container spacing={3} justify='center' >\r\n                <Grid item component={Card} xs={12} md={3} className={cx (styles.card, styles.infected) } >\r\n                    <CardContent>\r\n                        <Typography color=\"black\" gutterBottom >Infected</Typography>\r\n                        <Typography varaint=\"h5\" >\r\n                          <CountUp color=\"\" start={0} end={confirmed.value} duration={2.5} separator=\",\"\r\n                          />     \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\" >Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx (styles.card, styles.recovered) } >\r\n                    <CardContent>\r\n                        <Typography color=\"black\" gutterBottom >Recovered</Typography>\r\n                        <Typography varaint=\"h5\" >\r\n                          <CountUp  start={0} end={recovered.value} duration={2.5} separator=\",\"\r\n                          />    \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\" >Number of recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx (styles.card, styles.deaths) } >\r\n                    <CardContent>\r\n                        <Typography color=\"black\" gutterBottom >Deaths</Typography>\r\n                        <Typography varaint=\"h5\" >\r\n                          <CountUp  start={0} end={deaths.value} duration={2.5} separator=\",\"\r\n                          />    \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\" >Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if(country) {\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n\r\n        const modifiedData = data.map((dailyData) =>({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: {countries}} = await axios.get(`${url}/countries`);\r\n        \r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n  ","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: {confirmed, recovered, deaths}, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        // console.log(dailyData);\r\n\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length \r\n        ? (\r\n        <Line \r\n          data={{\r\n              labels: dailyData.map(({ date }) => date ),\r\n              datasets: [{\r\n                data: dailyData.map(({ confirmed }) => confirmed ),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true,\r\n              }, {\r\n                data: dailyData.map(({ deaths }) => deaths ),\r\n                label: 'deaths',\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                fill: true,\r\n              }],\r\n          }}\r\n        />): null\r\n\r\n    );\r\n\r\n    const barChart = (\r\n         confirmed\r\n        ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{ \r\n                        label: 'People',\r\n                        backgroundColor:[\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                             'rgba(0, 255, 0, 0.5)',\r\n                             'rgba(255, 0, 0, 0.5)',\r\n                        ],\r\n                        data:[  confirmed.value,  recovered.value,  deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: { display: true, text:`Current state in ${country}`},\r\n                }}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n     return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [ fetchedCountries, setFetchedCountries] =useState([]);\r\n\r\n    useEffect(()=> {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    console.log(fetchedCountries);\r\n\r\n    return (\r\n        <FormControl className={styles.FormControl} >\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)} >\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}> {country} </option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n \r\nexport default CountryPicker;","import React from 'react';\r\n\r\nimport { Cards, Chart, CountryPicker } from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\n\r\nimport coronaImage from './images/Untitled.jpg';\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        data: {},\r\n        country:'',\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n\r\n        this.setState({ data: fetchedData });\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n\r\n        this.setState({ data: fetchedData, country: country });\r\n    }\r\n\r\n    render() {\r\n        const { data, country } = this.state;\r\n\r\n        return (\r\n            <div className={styles.container} > \r\n              <img className={styles.image} src={coronaImage} alt='COVID-19' />\r\n              <Cards data={data} />\r\n              <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n              <Chart data={data} country={country} />\r\n              \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__Znnrv\",\"image\":\"App_image___74E_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__23DsL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2baRL\"};","module.exports = __webpack_public_path__ + \"static/media/Untitled.9f41372b.jpg\";"],"sourceRoot":""}